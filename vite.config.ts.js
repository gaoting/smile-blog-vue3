var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

// vite.config.ts
import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";
import prismjs from "vite-plugin-prismjs";
var { resolve } = __require("path");
var vite_config_default = () => defineConfig({
  build: {
    target: "modules",
    outDir: "dist",
    assetsDir: "assets",
    cssCodeSplit: true,
    sourcemap: false,
    rollupOptions: {}
  },
  plugins: [
    vue(),
    prismjs({
      languages: "all"
    })
  ],
  optimizeDeps: {
    entries: [],
    include: ["axios"],
    exclude: ["your-package-name"]
  },
  base: "./",
  logLevel: "info",
  clearScreen: true,
  resolve: {
    alias: {
      "@": resolve("/Users/smile/Coding/smile-blog-vue3", "src")
    },
    conditions: [],
    extensions: [
      ".mjs",
      ".js",
      ".ts",
      ".jsx",
      ".tsx",
      ".json",
      ".sass",
      ".scss"
    ]
  },
  json: {
    namedExports: true,
    stringify: false
  },
  esbuild: {
    jsxFactory: "h",
    jsxFragment: "Fragment",
    jsxInject: `import Vue from 'vue'`
  },
  server: {
    host: "localhost",
    https: false,
    cors: true,
    open: true,
    port: 9e3,
    strictPort: false,
    force: true,
    hmr: true,
    proxy: {
      "/api": {
        target: "http://localhost:3006",
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, "")
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7IC8vIFx1NUUyRVx1NjI0Qlx1NTFGRFx1NjU3MFx1RkYwQ1x1OEZEOVx1NjgzN1x1NEUwRFx1NzUyOCBqc2RvYyBcdTZDRThcdTg5RTNcdTRFNUZcdTUzRUZcdTRFRTVcdTgzQjdcdTUzRDZcdTdDN0JcdTU3OEJcdTYzRDBcdTc5M0FcbmltcG9ydCB2dWUgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXZ1ZVwiO1xuY29uc3QgeyByZXNvbHZlIH0gPSByZXF1aXJlKFwicGF0aFwiKTtcbmltcG9ydCBwcmlzbWpzIGZyb20gXCJ2aXRlLXBsdWdpbi1wcmlzbWpzXCI7XG5cbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCAoKSA9PlxuICBkZWZpbmVDb25maWcoe1xuICAgIC8vXHU2MjUzXHU1MzA1XHU5MTREXHU3RjZFXG4gICAgYnVpbGQ6IHtcbiAgICAgIC8vXHU2RDRGXHU4OUM4XHU1NjY4XHU1MTdDXHU1QkI5XHU2MDI3ICBcImVzbmV4dFwifFwibW9kdWxlc1wiXG4gICAgICB0YXJnZXQ6IFwibW9kdWxlc1wiLFxuICAgICAgLy9cdTYzMDdcdTVCOUFcdThGOTNcdTUxRkFcdThERUZcdTVGODRcbiAgICAgIG91dERpcjogXCJkaXN0XCIsXG4gICAgICAvL1x1NzUxRlx1NjIxMFx1OTc1OVx1NjAwMVx1OEQ0NFx1NkU5MFx1NzY4NFx1NUI1OFx1NjUzRVx1OERFRlx1NUY4NFxuICAgICAgYXNzZXRzRGlyOiBcImFzc2V0c1wiLFxuICAgICAgLy9cdTU0MkZcdTc1MjgvXHU3OTgxXHU3NTI4IENTUyBcdTRFRTNcdTc4MDFcdTYyQzZcdTUyMDZcbiAgICAgIGNzc0NvZGVTcGxpdDogdHJ1ZSxcbiAgICAgIC8vXHU2Nzg0XHU1RUZBXHU1NDBFXHU2NjJGXHU1NDI2XHU3NTFGXHU2MjEwIHNvdXJjZSBtYXAgXHU2NTg3XHU0RUY2XG4gICAgICBzb3VyY2VtYXA6IGZhbHNlLFxuICAgICAgLy9cdTgxRUFcdTVCOUFcdTRFNDlcdTVFOTVcdTVDNDJcdTc2ODQgUm9sbHVwIFx1NjI1M1x1NTMwNVx1OTE0RFx1N0Y2RVxuICAgICAgcm9sbHVwT3B0aW9uczoge30sXG4gICAgfSxcbiAgICBwbHVnaW5zOiBbXG4gICAgICAvL1x1OTE0RFx1N0Y2RVx1OTcwMFx1ODk4MVx1NEY3Rlx1NzUyOFx1NzY4NFx1NjNEMlx1NEVGNlx1NTIxN1x1ODg2OFxuICAgICAgdnVlKCksXG4gICAgICBwcmlzbWpzKHtcbiAgICAgICAgbGFuZ3VhZ2VzOiBcImFsbFwiLFxuICAgICAgfSksXG4gICAgXSxcbiAgICAvLyBcdTVGM0FcdTUyMzZcdTk4ODRcdTY3ODRcdTVFRkFcdTYzRDJcdTRFRjZcdTUzMDVcbiAgICBvcHRpbWl6ZURlcHM6IHtcbiAgICAgIC8vXHU2OEMwXHU2RDRCXHU5NzAwXHU4OTgxXHU5ODg0XHU2Nzg0XHU1RUZBXHU3Njg0XHU0RjlEXHU4RDU2XHU5ODc5XG4gICAgICBlbnRyaWVzOiBbXSxcbiAgICAgIC8vXHU5RUQ4XHU4QkE0XHU2MEM1XHU1MUI1XHU0RTBCXHVGRjBDXHU0RTBEXHU1NzI4IG5vZGVfbW9kdWxlcyBcdTRFMkRcdTc2ODRcdUZGMENcdTk0RkVcdTYzQTVcdTc2ODRcdTUzMDVcdTRFMERcdTRGMUFcdTk4ODRcdTY3ODRcdTVFRkFcbiAgICAgIGluY2x1ZGU6IFtcImF4aW9zXCJdLFxuICAgICAgZXhjbHVkZTogW1wieW91ci1wYWNrYWdlLW5hbWVcIl0sIC8vXHU2MzkyXHU5NjY0XHU1NzI4XHU0RjE4XHU1MzE2XHU0RTRCXHU1OTE2XG4gICAgfSxcbiAgICBiYXNlOiBcIi4vXCIsXG4gICAgLy9cdTYzQTdcdTUyMzZcdTUzRjBcdThGOTNcdTUxRkFcdTc2ODRcdTdFQTdcdTUyMkIgaW5mbyBcdTMwMDF3YXJuXHUzMDAxZXJyb3JcdTMwMDFzaWxlbnRcbiAgICBsb2dMZXZlbDogXCJpbmZvXCIsXG4gICAgLy8gXHU4QkJFXHU0RTNBZmFsc2UgXHU1M0VGXHU0RUU1XHU5MDdGXHU1MTREIHZpdGUgXHU2RTA1XHU1QzRGXHU4MDBDXHU5NTE5XHU4RkM3XHU1NzI4XHU3RUM4XHU3QUVGXHU0RTJEXHU2MjUzXHU1MzcwXHU2N0QwXHU0RTlCXHU1MTczXHU5NTJFXHU0RkUxXHU2MDZGXG4gICAgY2xlYXJTY3JlZW46IHRydWUsXG4gICAgcmVzb2x2ZToge1xuICAgICAgLy9cdTkxNERcdTdGNkVcdTUyMkJcdTU0MERcbiAgICAgIGFsaWFzOiB7XG4gICAgICAgIFwiQFwiOiByZXNvbHZlKFwiL1VzZXJzL3NtaWxlL0NvZGluZy9zbWlsZS1ibG9nLXZ1ZTNcIiwgXCJzcmNcIiksXG4gICAgICB9LFxuICAgICAgLy8gXHU2MEM1XHU2NjZGXHU1QkZDXHU1MUZBIHBhY2thZ2UuanNvbiBcdTkxNERcdTdGNkVcdTRFMkRcdTc2ODRleHBvcnRzXHU1QjU3XHU2QkI1XG4gICAgICBjb25kaXRpb25zOiBbXSxcbiAgICAgIC8vIFx1NUJGQ1x1NTE2NVx1NjVGNlx1NjBGM1x1ODk4MVx1NzcwMVx1NzU2NVx1NzY4NFx1NjI2OVx1NUM1NVx1NTQwRFx1NTIxN1x1ODg2OFxuICAgICAgLy8gXHU0RTBEXHU1RUZBXHU4QkFFXHU0RjdGXHU3NTI4IC52dWUgXHU1RjcxXHU1NENESURFXHU1NDhDXHU3QzdCXHU1NzhCXHU2NTJGXHU2MzAxXG4gICAgICBleHRlbnNpb25zOiBbXG4gICAgICAgIFwiLm1qc1wiLFxuICAgICAgICBcIi5qc1wiLFxuICAgICAgICBcIi50c1wiLFxuICAgICAgICBcIi5qc3hcIixcbiAgICAgICAgXCIudHN4XCIsXG4gICAgICAgIFwiLmpzb25cIixcbiAgICAgICAgXCIuc2Fzc1wiLFxuICAgICAgICBcIi5zY3NzXCIsXG4gICAgICBdLFxuICAgIH0sXG5cbiAgICBqc29uOiB7XG4gICAgICAvL1x1NjYyRlx1NTQyNlx1NjUyRlx1NjMwMVx1NEVDRSAuanNvbiBcdTY1ODdcdTRFRjZcdTRFMkRcdThGREJcdTg4NENcdTYzMDlcdTU0MERcdTVCRkNcdTUxNjVcbiAgICAgIG5hbWVkRXhwb3J0czogdHJ1ZSxcbiAgICAgIC8vXHU4MkU1XHU4QkJFXHU3RjZFXHU0RTNBIHRydWUgXHU1QkZDXHU1MTY1XHU3Njg0anNvblx1NEYxQVx1ODhBQlx1OEY2Q1x1NEUzQSBleHBvcnQgZGVmYXVsdCBKU09OLnBhcnNlKFwiLi5cIikgXHU0RjFBXHU2QkQ0XHU4RjZDXHU4QkQxXHU2MjEwXHU1QkY5XHU4QzYxXHU1QjU3XHU5NzYyXHU5MUNGXHU2MDI3XHU4MEZEXHU2NkY0XHU1OTdEXG4gICAgICBzdHJpbmdpZnk6IGZhbHNlLFxuICAgIH0sXG4gICAgLy9cdTdFRTdcdTYyN0ZcdTgxRUEgZXNidWlsZCBcdThGNkNcdTYzNjJcdTkwMDlcdTk4NzlcdUZGMENcdTY3MDBcdTVFMzhcdTg5QzFcdTc2ODRcdTc1MjhcdTRGOEJcdTY2MkZcdTgxRUFcdTVCOUFcdTRFNDkgSlNYXG4gICAgZXNidWlsZDoge1xuICAgICAganN4RmFjdG9yeTogXCJoXCIsXG4gICAgICBqc3hGcmFnbWVudDogXCJGcmFnbWVudFwiLFxuICAgICAganN4SW5qZWN0OiBgaW1wb3J0IFZ1ZSBmcm9tICd2dWUnYCxcbiAgICB9LFxuICAgIC8vXHU2NzJDXHU1NzMwXHU4RkQwXHU4ODRDXHU5MTREXHU3RjZFXHVGRjBDXHU0RUU1XHU1M0NBXHU1M0NEXHU1NDExXHU0RUUzXHU3NDA2XHU5MTREXHU3RjZFXG4gICAgc2VydmVyOiB7XG4gICAgICBob3N0OiBcImxvY2FsaG9zdFwiLFxuICAgICAgaHR0cHM6IGZhbHNlLCAvL1x1NjYyRlx1NTQyNlx1NTQyRlx1NzUyOCBodHRwIDJcbiAgICAgIGNvcnM6IHRydWUsIC8vXHU0RTNBXHU1RjAwXHU1M0QxXHU2NzBEXHU1MkExXHU1NjY4XHU5MTREXHU3RjZFIENPUlMgLCBcdTlFRDhcdThCQTRcdTU0MkZcdTc1MjhcdTVFNzZcdTUxNDFcdThCQjhcdTRFRkJcdTRGNTVcdTZFOTBcbiAgICAgIG9wZW46IHRydWUsIC8vXHU2NzBEXHU1MkExXHU1NDJGXHU1MkE4XHU2NUY2XHU4MUVBXHU1MkE4XHU1NzI4XHU2RDRGXHU4OUM4XHU1NjY4XHU0RTJEXHU2MjUzXHU1RjAwXHU1RTk0XHU3NTI4XG4gICAgICBwb3J0OiA5MDAwLFxuICAgICAgc3RyaWN0UG9ydDogZmFsc2UsIC8vXHU4QkJFXHU0RTNBdHJ1ZVx1NjVGNlx1N0FFRlx1NTNFM1x1ODhBQlx1NTM2MFx1NzUyOFx1NTIxOVx1NzZGNFx1NjNBNVx1OTAwMFx1NTFGQVx1RkYwQ1x1NEUwRFx1NEYxQVx1NUMxRFx1OEJENVx1NEUwQlx1NEUwMFx1NEUyQVx1NTNFRlx1NzUyOFx1N0FFRlx1NTNFM1xuICAgICAgZm9yY2U6IHRydWUsIC8vXHU2NjJGXHU1NDI2XHU1RjNBXHU1MjM2XHU0RjlEXHU4RDU2XHU5ODg0XHU2Nzg0XHU1RUZBXG4gICAgICBobXI6IHRydWUsIC8vXHU3OTgxXHU3NTI4XHU2MjE2XHU5MTREXHU3RjZFIEhNUiBcdThGREVcdTYzQTVcbiAgICAgIC8vIFx1NEYyMFx1OTAxMlx1N0VEOSBjaG9ja2lkYXIgXHU3Njg0XHU2NTg3XHU0RUY2XHU3Q0ZCXHU3RURGXHU3NkQxXHU4OUM2XHU1NjY4XHU5MDA5XHU5ODc5XG4gICAgICAvLyB3YXRjaDoge1xuICAgICAgLy8gICBpZ25vcmVkOiBbXCIhKiovbm9kZV9tb2R1bGVzL3lvdXItcGFja2FnZS1uYW1lLyoqXCJdLFxuICAgICAgLy8gfSxcbiAgICAgIC8vIFx1NTNDRFx1NTQxMVx1NEVFM1x1NzQwNlx1OTE0RFx1N0Y2RVxuICAgICAgcHJveHk6IHtcbiAgICAgICAgXCIvYXBpXCI6IHtcbiAgICAgICAgICB0YXJnZXQ6IFwiaHR0cDovL2xvY2FsaG9zdDozMDA2XCIsIC8vXHU0RUUzXHU3NDA2XHU2M0E1XHU1M0UzXG4gICAgICAgICAgY2hhbmdlT3JpZ2luOiB0cnVlLFxuICAgICAgICAgIHJld3JpdGU6IChwYXRoKSA9PiBwYXRoLnJlcGxhY2UoL15cXC9hcGkvLCBcIlwiKSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7QUFBQSxTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFNBQVM7QUFFaEIsT0FBTyxhQUFhO0FBRHBCLElBQU0sRUFBRSxRQUFRLElBQUksVUFBUTtBQUk1QixJQUFPLHNCQUFRLE1BQ2IsYUFBYTtBQUFBLEVBRVgsT0FBTztBQUFBLElBRUwsUUFBUTtBQUFBLElBRVIsUUFBUTtBQUFBLElBRVIsV0FBVztBQUFBLElBRVgsY0FBYztBQUFBLElBRWQsV0FBVztBQUFBLElBRVgsZUFBZSxDQUFDO0FBQUEsRUFDbEI7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUVQLElBQUk7QUFBQSxJQUNKLFFBQVE7QUFBQSxNQUNOLFdBQVc7QUFBQSxJQUNiLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFQSxjQUFjO0FBQUEsSUFFWixTQUFTLENBQUM7QUFBQSxJQUVWLFNBQVMsQ0FBQyxPQUFPO0FBQUEsSUFDakIsU0FBUyxDQUFDLG1CQUFtQjtBQUFBLEVBQy9CO0FBQUEsRUFDQSxNQUFNO0FBQUEsRUFFTixVQUFVO0FBQUEsRUFFVixhQUFhO0FBQUEsRUFDYixTQUFTO0FBQUEsSUFFUCxPQUFPO0FBQUEsTUFDTCxLQUFLLFFBQVEsdUNBQXVDLEtBQUs7QUFBQSxJQUMzRDtBQUFBLElBRUEsWUFBWSxDQUFDO0FBQUEsSUFHYixZQUFZO0FBQUEsTUFDVjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBRUEsTUFBTTtBQUFBLElBRUosY0FBYztBQUFBLElBRWQsV0FBVztBQUFBLEVBQ2I7QUFBQSxFQUVBLFNBQVM7QUFBQSxJQUNQLFlBQVk7QUFBQSxJQUNaLGFBQWE7QUFBQSxJQUNiLFdBQVc7QUFBQSxFQUNiO0FBQUEsRUFFQSxRQUFRO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixPQUFPO0FBQUEsSUFDUCxNQUFNO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixZQUFZO0FBQUEsSUFDWixPQUFPO0FBQUEsSUFDUCxLQUFLO0FBQUEsSUFNTCxPQUFPO0FBQUEsTUFDTCxRQUFRO0FBQUEsUUFDTixRQUFRO0FBQUEsUUFDUixjQUFjO0FBQUEsUUFDZCxTQUFTLENBQUMsU0FBUyxLQUFLLFFBQVEsVUFBVSxFQUFFO0FBQUEsTUFDOUM7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
